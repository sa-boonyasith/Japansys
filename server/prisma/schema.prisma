// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  user_id     Int       @id @default(autoincrement())
  username    String    @unique
  firstname   String
  lastname    String
  email       String    @unique
  password    String
  role        Role      @default(recruit)
  employee_id Int?      @unique // Add this field
  employee    Employee? @relation(fields: [employee_id], references: [id], onDelete: Cascade) // Add this relation

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Employee {
  id            Int    @id @default(autoincrement())
  firstname     String @db.VarChar(100)
  lastname      String @db.VarChar(100)
  job_position  String @db.VarChar(150)
  salary        Float
  documents     Json?
  personal_info Json?
  user          user?

  phone_number String   @db.VarChar(20)
  email        String   @unique @db.VarChar(150)
  liveby       String
  birth_date   DateTime @db.Date
  age          Int
  ethnicity    String   @db.VarChar(50)

  nationality     String  @db.VarChar(50)
  religion        String  @db.VarChar(50)
  marital_status  String  @db.VarChar(50)
  military_status String  @db.VarChar(100)
  role            Role    @default(employee)
  photo           String
  banking         String?
  banking_id      String?

  // Relationships
  LeaveRequests LeaveRequest[]
  Meetings      Meetingroom[]
  RentCars      Rentcar[]
  Todos         Todo[]
  Salary        Salary[]
  attends       attend[]
  attendhistory attendhistory[]
  projects      Project[]
  Expense       Expense[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
}

model JobApplication {
  job_id           Int       @id @default(autoincrement())
  application_date DateTime? @default(now())
  firstname        String?   @db.VarChar(100)
  lastname         String?   @db.VarChar(100)
  job_position     String?   @db.VarChar(150)
  expected_salary  Float?
  documents        Json?
  personal_info    Json?

  phone_number    String?       @db.VarChar(20)
  email           String        @unique @db.VarChar(150)
  liveby          String?
  birth_date      String?
  age             Int?
  ethnicity       String?       @db.VarChar(50)
  nationality     String?       @db.VarChar(50)
  religion        String?       @db.VarChar(50)
  marital_status  String?       @db.VarChar(50)
  military_status String?       @db.VarChar(100)
  status          StatusJobapp? @default(new)
  photo           String?       @db.Text
  banking         String?
  banking_id      String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model attend {
  attend_id   Int      @id @default(autoincrement())
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int
  firstname   String   @db.VarChar(100)
  lastname    String   @db.VarChar(100)

  check_in_time  DateTime? @default(now())
  check_out_time DateTime? @default(now())
  working_hours  Float?
  status         Attend    @default(not_checked_in)
}

model LeaveRequest {
  leave_id    Int      @id @default(autoincrement())
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int

  firstname String   @db.VarChar(100)
  lastname  String   @db.VarChar(100)
  leavetype String
  startdate DateTime @db.Date
  enddate   DateTime @db.Date
  action    Action   @default(pending)
  status    String   @default("Pending")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Meetingroom {
  meeting_id  Int      @id @default(autoincrement())
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int

  firstname String   @db.VarChar(100)
  lastname  String   @db.VarChar(100)
  startdate DateTime @db.Date
  enddate   DateTime @db.Date
  timestart String
  timeend   String
  status    String   @default("Pending")
}

model Rentcar {
  rentcar_id  Int      @id @default(autoincrement())
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int

  firstname String   @db.VarChar(100)
  lastname  String   @db.VarChar(100)
  startdate DateTime @db.Date
  enddate   DateTime @db.Date
  timestart String
  timeend   String
  place     String
  car       String
  status    Status   @default(Pending)
}

model Project {
  project_id      Int      @id @default(autoincrement())
  project_name    String   @unique
  progress        Int
  progress_circle Int      @default(0)
  employee_id     Int
  employee        Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  todos           Todo[]   @relation("ProjectTodos")
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Todo {
  todo_id     Int      @id @default(autoincrement())
  name        String
  desc        String
  status      todojob  @default(mustdo)
  project     Project  @relation("ProjectTodos", fields: [project_id], references: [project_id], onDelete: Cascade)
  project_id  Int
  employee    Employee @relation(fields: [employee_id], references: [id])
  employee_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Salary {
  salary_id   Int      @id @default(autoincrement())
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int
  firstname   String
  lastname    String
  position    String

  payroll_startdate DateTime  @db.Date
  payroll_enddate   DateTime  @db.Date
  payment_date      DateTime? @db.Date
  banking           String
  banking_id        Int
  salary            Float     @default(0)
  absent_late       Float     @default(0)
  overtime          Float     @default(0)
  bonus             Float     @default(0)
  bonus_total       Float     @default(0)
  tax               Float     @default(0) //ภาษี
  providentfund     Float     @default(0) //กองทุนสำรองชีพ
  socialsecurity    Float     @default(0) //ประกันสังคม
  expense           Float     @default(0) //ค่าเบิกเงิน
  tax_total         Float     @default(0) //ภาษีทั้งหมด
  salary_total      Float     @default(0) //เงินเดือนทั้งหมด
  status            String    @default("Pending")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Expense {
  expen_id     Int      @id @default(autoincrement())
  employee     Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id  Int
  firstname    String
  lastname     String
  date         DateTime @db.Date
  type_expense String
  money        Int
  desc         String
  status       String   @default("Pending")
}

model attendhistory {
  id             Int      @id @default(autoincrement())
  attend_id      Int
  employee_id    Int
  firstname      String
  lastname       String
  check_in_time  DateTime
  check_out_time DateTime
  working_hours  Float
  status         String

  // Relations if any
  employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
}

model customer {
  customer_id      Int      @id @default(autoincrement())
  cus_company_name String
  contact_name     String
  cus_position     String
  cus_address      String
  cus_phone        String
  cus_tax_id       String
  cus_bankname     String // ชื่อธนาคาร
  cus_banknumber   String // เลขบัญชีธนาคาร
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  invoices   invoice[] // ความสัมพันธ์กับใบแจ้งหนี้
  meetingcus meetingcus[]
  quotation  quotation[]
  receipt    receipt[]
}

model quotation {
  quotation_id         Int      @id @default(autoincrement())
  customer             customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  customer_id          Int
  date                 DateTime @db.Date
  expire_date          DateTime @db.Date
  confirm_price        Float
  discount_rate        Float // หน่วยเป็นเปอร์เซ็นต์
  subtotal             Float
  total_after_discount Float
  vat                  Float    @default(7.0) // หน่วยเป็นเปอร์เซ็นต์
  vat_amount           Float
  total_all            Float
  total_inthai         String?
  status               String   @default("pending")
  credit_term          Int // หน่วยเป็นวัน

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  quotation_items quotation_item[] // เชื่อมกับรายการสินค้า
}

model quotation_item {
  quotation_item_id Int       @id @default(autoincrement())
  quotation         quotation @relation(fields: [quotation_id], references: [quotation_id], onDelete: Cascade)
  quotation_id      Int
  product           product   @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  product_id        Int
  quantity          Int
  unit_price        Float
  total             Float
  discount          Float

  created_at DateTime @default(now())
}

model product {
  product_id Int      @id @default(autoincrement())
  name       String   @unique
  price      Float // ราคาสินค้า
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  invoiceItems   invoice_item[]
  quotationitems quotation_item[]
  receiptitems   receipt_item[]
}

model receipt {
  receipt_id           Int      @id @default(autoincrement())
  customer_id          Int
  customer             customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  date                 DateTime @db.Date
  expire_date          DateTime @db.Date
  confirm_price        Float
  discount_rate        Float // หน่วยเป็นเปอร์เซ็นต์
  subtotal             Float
  total_after_discount Float
  vat                  Float    @default(7.0) // หน่วยเป็นเปอร์เซ็นต์
  vat_amount           Float
  total_all            Float
  total_inthai         String?
  status               String   @default("pending")
  credit_term          Int // หน่วยเป็นวัน

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  receipt_items receipt_item[]
}

model receipt_item {
  item_id    Int     @id @default(autoincrement())
  receipt_id Int // เชื่อมโยงกับใบแจ้งหนี้
  receipt    receipt @relation(fields: [receipt_id], references: [receipt_id], onDelete: Cascade)
  product_id Int // เชื่อมโยงกับสินค้า
  product    product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  quantity   Int
  unit_price Float
  total      Float
  discount   Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model invoice {
  invoice_id           Int      @id @default(autoincrement())
  customer_id          Int
  customer             customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade) // ดึงข้อมูลจาก customer
  date                 DateTime @db.Date
  expire_date          DateTime @db.Date
  confirm_price        Float
  discount_rate        Float // หน่วยเป็นเปอร์เซ็นต์
  subtotal             Float
  total_after_discount Float
  vat                  Float    @default(7.0) // หน่วยเป็นเปอร์เซ็นต์
  vat_amount           Float
  total_all            Float
  total_inthai         String?
  status               String   @default("pending")
  credit_term          Int // หน่วยเป็นวัน
  

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  invoice_items invoice_item[] // รายการสินค้าในใบแจ้งหนี้
}

model invoice_item {
  item_id    Int     @id @default(autoincrement())
  invoice_id Int // เชื่อมโยงกับใบแจ้งหนี้
  invoice    invoice @relation(fields: [invoice_id], references: [invoice_id], onDelete: Cascade)
  product_id Int // เชื่อมโยงกับสินค้า
  product    product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  quantity   Int
  unit_price Float
  total      Float
  discount   Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model meetingcus {
  meeting_cus Int      @id @default(autoincrement())
  customer    customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  customer_id Int

  cus_company_name String
  contact_name     String
  cus_postition    String
  cus_address      String
  cus_phone        String
  cus_tax_id       String
  cus_bankname     String
  cus_banknumber   String

  startdate String
  enddate   String
  timestart String // เก็บเป็น String (HH:mm:ss)
  timeend   String // เก็บเป็น String (HH:mm:ss)

  status String @default("Pending")
}

model Income {
  income_id  Int      @id @default(autoincrement())
  desc       String
  money      Float
  total      Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Payment {
  payment_id Int      @id @default(autoincrement())
  desc       String
  money      Float
  total      Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Attend {
  check_in
  check_out
  not_checked_in
}

enum Role {
  employee
  user
  admin
  recruit
}

enum Action {
  pending
  approved
  rejected
}

enum todojob {
  mustdo
  inprogress
  finish
}

enum StatusJobapp {
  new
  wait
  pass
  reject
}

enum Status {
  Pending
  Allowed
  Rejected
}
