import React, { useState, useEffect } from "react";
import axios from "axios";
import AddJob from "./AddJob";
import { Plus, Trash2, PencilIcon, Camera } from "lucide-react";

const Job = () => {
  const [applications, setApplications] = useState([]);
  const [selectedApplication, setSelectedApplication] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [addModalOpen, setAddModalOpen] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [editedApplication, setEditedApplication] = useState(null);

  useEffect(() => {
    fetchApplications();
  }, []);

  const fetchApplications = async () => {
    await axios
      .get("http://localhost:8080/api/jobaplication")
      .then((response) => {
        setApplications(response.data.listjobaplication);
      })
      .catch((error) => {
        console.error("Error fetching applications:", error);
      });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    const formatPhoneNumber = (value) => {
      const cleaned = value.replace(/\D/g, "").slice(0, 10); // ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î 10 ‡∏ï‡∏±‡∏ß
      if (cleaned.length <= 3) {
        return cleaned;
      } else if (cleaned.length <= 6) {
        return `${cleaned.slice(0, 3)}-${cleaned.slice(3)}`;
      } else {
        return `${cleaned.slice(0, 3)}-${cleaned.slice(3, 6)}-${cleaned.slice(
          6
        )}`;
      }
    };

    setEditedApplication((prev) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô nested ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (name.includes(".")) {
        const [parent, child] = name.split("."); // ‡πÅ‡∏¢‡∏Å key ‡πÄ‡∏õ‡πá‡∏ô parent ‡πÅ‡∏•‡∏∞ child
        return {
          ...prev,
          [parent]: {
            ...prev[parent], // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á parent object
            [child]:
              child === "phone_number"
                ? formatPhoneNumber(value) // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
                : child === "age" || child === "expected_salary"
                ? value === ""
                  ? ""
                  : Number(value) // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞ age ‡πÅ‡∏•‡∏∞ expected_salary
                : value, // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
          },
        };
      } else {
        return {
          ...prev,
          [name]:
            name === "phone_number"
              ? formatPhoneNumber(value)
              : name === "age" || name === "expected_salary"
              ? value === ""
                ? ""
                : Number(value)
              : value,
        };
      }
    });
  };

  const handleEditStatus = (id, newStatus) => {
    // ‡∏´‡∏≤ application ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    const applicationToUpdate = applications.find((app) => app.job_id === id);

    if (!applicationToUpdate) {
      console.error("Application not found");
      return;
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö status ‡πÉ‡∏´‡∏°‡πà
    const updatedData = {
      ...applicationToUpdate,
      status: newStatus,
      expected_salary: Number(applicationToUpdate.expected_salary),
      age: Number(applicationToUpdate.age),
    };

    axios
      .put(`http://localhost:8080/api/jobaplication/${id}`, updatedData)
      .then(() => {
        fetchApplications();
      })
      .catch((error) => {
        console.error("Error updating status:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      });
  };

  const handleDelete = (id) => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      axios
        .delete(`http://localhost:8080/api/jobaplication/${id}`)
        .then(() => {
          setApplications((prev) => prev.filter((app) => app.job_id !== id));
          setIsModalOpen(false);
        })
        .catch((error) => {
          console.error("Error deleting application:", error);
        });
    }
  };

  const handleFileChange = async (e, jobId) => {
    const file = e.target.files[0];
    if (!file) return;
  
    const formData = new FormData();
    formData.append('photo', file);
    
    // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    formData.append('firstname', editedApplication.firstname);
    formData.append('lastname', editedApplication.lastname);
    formData.append('job_position', editedApplication.job_position);
    formData.append('expected_salary', editedApplication.expected_salary);
    formData.append('phone_number', editedApplication.phone_number);
    formData.append('email', editedApplication.email);
    formData.append('liveby', editedApplication.liveby);
    formData.append('birth_date', editedApplication.birth_date);
    formData.append('age', editedApplication.age);
    formData.append('ethnicity', editedApplication.ethnicity);
    formData.append('nationality', editedApplication.nationality);
    formData.append('religion', editedApplication.religion);
    formData.append('marital_status', editedApplication.marital_status);
    formData.append('military_status', editedApplication.military_status);
    formData.append('status', editedApplication.status);
    
    // ‡πÅ‡∏õ‡∏•‡∏á personal_info ‡πÄ‡∏õ‡πá‡∏ô string ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    if (editedApplication.personal_info) {
      formData.append('personal_info', JSON.stringify(editedApplication.personal_info));
    }
  
    try {
      const response = await axios.put(
        `http://localhost:8080/api/jobaplication/${jobId}`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );
  
      if (response.status === 200) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state
        const updatedPhoto = response.data.application.photo;
        setSelectedApplication(prev => ({
          ...prev,
          photo: updatedPhoto
        }));
        
        setEditedApplication(prev => ({
          ...prev,
          photo: updatedPhoto
        }));
  
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        fetchApplications();
        
        alert('‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (error) {
      console.error('Error uploading photo:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
    }
  };


  const handleUpdateApplication = async () => {
    try {
      if (!editedApplication) {
        alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");
        return;
      }

      const updatedData = {
        ...editedApplication,
        expected_salary: editedApplication.expected_salary
          ? Number(editedApplication.expected_salary)
          : 0,
        age: editedApplication.age ? Number(editedApplication.age) : 0,
      };

      console.log("üìå Updated Data:", updatedData);

      const response = await axios.put(
        `http://localhost:8080/api/jobaplication/${editedApplication.job_id}`,
        updatedData
      );

      if (response.status === 200) {
        fetchApplications(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        setEditMode(false);
        setIsModalOpen(false);
        alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        alert("‚ö†Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        console.log("", error);
      }
    } catch (error) {
      console.error("‚ùå Error updating application:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  const filterByStatus = (status) =>
    applications.filter((app) => app.status === status);

  const handleViewDetails = (app) => {
    setSelectedApplication(app);
    setEditedApplication(app);
    setIsModalOpen(true);
    setEditMode(false);
  };

  const getStatusColor = (status) => {
    const colors = {
      new: "bg-blue-500 hover:bg-blue-600",
      wait: "bg-yellow-500 hover:bg-yellow-600",
      pass: "bg-green-500 hover:bg-green-600",
    };
    return colors[status] || "bg-gray-500 hover:bg-gray-600";
  };

  const getStatusBadge = (status) => {
    const styles = {
      new: "bg-blue-100 text-blue-800 border-blue-200",
      wait: "bg-yellow-100 text-yellow-800 border-yellow-200",
      pass: "bg-green-100 text-green-800 border-green-200",
    };
    return styles[status] || "bg-gray-100 text-gray-800 border-gray-200";
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900">
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏á‡∏≤‡∏ô
          </h1>
          <button
            onClick={() => setAddModalOpen(true)}
            className="flex items-center gap-2 bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition"
          >
            <Plus size={20} />
            <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£</span>
          </button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {["new", "wait", "pass"].map((status) => (
            <div
              key={status}
              className="bg-white rounded-xl shadow-sm border border-gray-200"
            >
              <div className={`p-4 ${getStatusColor(status)} rounded-t-xl`}>
                <h2 className="text-xl font-semibold text-white">
                  {status === "new" && "‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà"}
                  {status === "wait" && "‡∏£‡∏≠‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå"}
                  {status === "pass" && "‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå"}
                  <span className="ml-2 text-sm font-normal text-white opacity-80">
                    ({filterByStatus(status).length})
                  </span>
                </h2>
              </div>
              <div className="p-4">
                <ul className="space-y-3">
                  {filterByStatus(status).map((app) => (
                    <li
                      key={app.job_id}
                      className="p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <img
                            src={`http://localhost:8080${app.photo}`}
                            alt="Profile"
                            className="w-10 h-10 rounded-full object-cover"
                          />
                          <div>
                            <p
                              className="font-medium text-blue-600 hover:text-blue-800 cursor-pointer"
                              onClick={() => handleViewDetails(app)}
                            >
                              {app.firstname} {app.lastname}
                            </p>
                            <p className="text-sm text-gray-600">
                              ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {app.job_position}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <select
                            value={app.status}
                            onChange={(e) =>
                              handleEditStatus(app.job_id, e.target.value)
                            }
                            className={`text-sm rounded-lg border px-3 py-1.5 ${getStatusBadge(
                              app.status
                            )}`}
                          >
                            <option value="new">‡πÉ‡∏´‡∏°‡πà</option>
                            <option value="wait">‡∏£‡∏≠‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå</option>
                            <option value="pass">‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå</option>
                          </select>
                        </div>
                      </div>
                    </li>
                  ))}
                  {filterByStatus(status).length === 0 && (
                    <li className="text-center py-8">
                      <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
                    </li>
                  )}
                </ul>
              </div>
            </div>
          ))}
        </div>

        {isModalOpen && selectedApplication && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-xl shadow-xl w-[800px] max-h-[90vh] overflow-y-auto">
              <div className="sticky top-0 bg-white px-6 py-4 border-b border-gray-200">
                <div className="flex justify-between items-center">
                  <h3 className="text-xl font-semibold text-gray-900">
                    {editMode ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£" : "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£"}
                  </h3>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setEditMode(!editMode)}
                      className="text-blue-600 hover:text-blue-800"
                    >
                      <PencilIcon size={20} />
                    </button>
                    <button
                      onClick={() => {
                        setIsModalOpen(false);
                        setEditMode(false);
                      }}
                      className="text-red-500 hover:text-red-700"
                    >
                      ‚úï
                    </button>
                  </div>
                </div>
              </div>

              <div className="p-6">
                <div className="flex items-start gap-6 mb-6">
                  <div className="relative group">
                    <img
                      src={`http://localhost:8080${selectedApplication.photo}`}
                      alt="Profile"
                      className="w-32 h-32 rounded-lg object-cover border border-gray-200"
                    />
                    {editMode && (
                      <label className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 rounded-lg cursor-pointer transition">
                        <Camera className="text-white" size={24} />
                        <input
                          type="file"
                          className="hidden"
                          accept="image/*"
                          onChange={(e) =>
                            handleFileChange(e, selectedApplication.job_id)
                          }
                        />
                      </label>
                    )}
                  </div>
                  <div>
                    {editMode ? (
                      <div className="space-y-4">
                        <div className="grid grid-cols-2 gap-4">
                          <div className="space-y-3">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏ä‡∏∑‡πà‡∏≠
                              </label>
                              <input
                                type="text"
                                name="firstname"
                                value={editedApplication.firstname}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
                              </label>
                              <input
                                type="text"
                                name="lastname"
                                value={editedApplication.lastname}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                              </label>
                              <input
                                type="email"
                                name="email"
                                value={editedApplication.email}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
                              </label>
                              <input
                                type="text"
                                name="phone_number"
                                maxLength={12}
                                value={editedApplication.phone_number}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö
                              </label>
                              <select
                                name="liveby"
                                value={editedApplication.liveby}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              >
                                <option value="‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß">
                                  ‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
                                </option>
                                <option value="‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á">‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á</option>
                                <option value="‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡πà‡∏≤">‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡πà‡∏≤</option>
                                <option value="‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î">‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î</option>
                              </select>
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                              </label>
                              <input
                                type="text"
                                name="personal_info.address"
                                value={editedApplication.personal_info.address}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
                              </label>
                              <input
                                type="text"
                                name="personal_info.city"
                                value={editedApplication.personal_info.city}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå
                              </label>
                              <input
                                maxLength={5}
                                type="text"
                                name="personal_info.zip_code"
                                value={editedApplication.personal_info.zip_code}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                          </div>
                          <div className="space-y-3">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                              </label>
                              <input
                                type="text"
                                name="job_position"
                                value={editedApplication.job_position}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
                              </label>
                              <input
                                type="number"
                                name="expected_salary"
                                value={editedApplication.expected_salary}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏≠‡∏≤‡∏¢‡∏∏
                              </label>
                              <input
                                type="number"
                                name="age"
                                value={editedApplication.age}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥
                              </label>
                              <input
                                type="text"
                                name="ethnicity"
                                value={editedApplication.ethnicity}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥
                              </label>
                              <input
                                type="text"
                                name="nationality"
                                value={editedApplication.nationality}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏®‡∏≤‡∏™‡∏ô‡∏≤
                              </label>
                              <input
                                type="text"
                                name="religion"
                                value={editedApplication.religion}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û
                              </label>
                              <select
                                name="marital_status"
                                value={editedApplication.marital_status}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              >
                                <option value="‡πÇ‡∏™‡∏î">‡πÇ‡∏™‡∏î</option>
                                <option value="‡∏™‡∏°‡∏£‡∏™">‡∏™‡∏°‡∏£‡∏™</option>
                                <option value="‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á">‡∏´‡∏¢‡πà‡∏≤‡∏£‡πâ‡∏≤‡∏á</option>
                              </select>
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">
                                ‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£
                              </label>
                              <select
                                name="military_status"
                                value={editedApplication.military_status}
                                onChange={handleInputChange}
                                className="w-full rounded-lg border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                              >
                                <option value="‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô">
                                  ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô
                                </option>
                                <option value="‡∏õ‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏´‡∏≤‡∏£‡∏Å‡∏≠‡∏á‡∏´‡∏ô‡∏∏‡∏ô">
                                  ‡∏õ‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏´‡∏≤‡∏£‡∏Å‡∏≠‡∏á‡∏´‡∏ô‡∏∏‡∏ô
                                </option>
                                <option value="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå">
                                  ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏ì‡∏ë‡πå
                                </option>
                              </select>
                            </div>
                          </div>
                        </div>

                        <div className="flex gap-3 mt-6">
                          <button
                            onClick={handleUpdateApplication}
                            className="flex-1 bg-blue-500 text-white rounded-lg px-4 py-2 hover:bg-blue-600 transition"
                          >
                            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </button>
                          <button
                            onClick={() =>
                              handleDelete(editedApplication.job_id)
                            }
                            className="flex-1 bg-red-500 text-white rounded-lg px-4 py-2 hover:bg-red-600 transition"
                          >
                            ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                          </button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <h4 className="text-2xl font-semibold text-gray-900">
                          {selectedApplication.firstname}{" "}
                          {selectedApplication.lastname}
                        </h4>
                        <p className="text-gray-600 mt-1">
                          ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {selectedApplication.job_position}
                        </p>
                        <p className="text-gray-600 mt-1">
                          <span className="text-gray-600 mt-1">
                            ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á:
                          </span>{" "}
                          {Number(
                            selectedApplication.expected_salary
                          ).toLocaleString()}{" "}
                          ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                        </p>

                        <div className="mt-2">
                          <span
                            className={`inline-block px-3 py-1 rounded-full text-sm font-medium ${getStatusBadge(
                              selectedApplication.status
                            )}`}
                          >
                            {selectedApplication.status === "new"
                              ? "‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà"
                              : selectedApplication.status === "wait"
                              ? "‡∏£‡∏≠‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå"
                              : "‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå"}
                          </span>
                        </div>
                        <div className="grid grid-cols-2 gap-6 mt-6">
                          <div>
                            <h5 className="font-semibold text-gray-900 mb-3">
                              ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
                            </h5>
                            <div className="space-y-2 text-gray-600">
                              <p>
                                <span className="font-medium">‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</span>{" "}
                                {selectedApplication.email}
                              </p>
                              <p>
                                <span className="font-medium">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</span>{" "}
                                {selectedApplication.phone_number}
                              </p>
                              <p>
                                <span className="font-medium">
                                  ‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö
                                </span>{" "}
                                {selectedApplication.liveby}
                              </p>
                              <p>
                                <span className="font-medium">
                                  ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
                                </span>{" "}
                                {selectedApplication.personal_info.address}
                              </p>
                              <p>
                                <span className="font-medium">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:</span>{" "}
                                {selectedApplication.personal_info.city}
                              </p>
                              <p>
                                <span className="font-medium">
                                  ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå:
                                </span>{" "}
                                {selectedApplication.personal_info.zip_code}
                              </p>
                            </div>
                          </div>
                          <div>
                            <div className="space-y-2 text-gray-600 mt-9">
                              <p>
                                <span className="font-medium">‡∏≠‡∏≤‡∏¢‡∏∏:</span>{" "}
                                {selectedApplication.age} ‡∏õ‡∏µ
                              </p>
                              <p>
                                <span className="font-medium">
                                  ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î:
                                </span>{" "}
                                {new Date(
                                  selectedApplication.birth_date
                                ).toLocaleDateString("th-TH")}
                              </p>
                              <p>
                                <span className="font-medium">‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥</span>{" "}
                                {selectedApplication.ethnicity}
                              </p>
                              <p>
                                <span className="font-medium">‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥</span>{" "}
                                {selectedApplication.nationality}
                              </p>
                              <p>
                                <span className="font-medium">‡∏®‡∏≤‡∏™‡∏ô‡∏≤</span>{" "}
                                {selectedApplication.religion}
                              </p>
                              <p>
                                <span className="font-medium">‡∏™‡∏ñ‡∏≤‡∏ô‡∏†‡∏≤‡∏û:</span>{" "}
                                {selectedApplication.marital_status}
                              </p>
                              <p>
                                <span className="font-medium">
                                  ‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£:
                                </span>{" "}
                                {selectedApplication.military_status}
                              </p>
                            </div>
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {addModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-xl shadow-xl w-[1000px] max-h-[90vh] overflow-y-auto">
              <div className="sticky top-0 bg-white px-6 py-4 border-b border-gray-200">
                <div className="flex justify-between items-center">
                  <h3 className="text-xl font-semibold text-gray-900">
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </h3>
                  <button
                    onClick={() => setAddModalOpen(false)}
                    className="text-gray-500 hover:text-gray-700"
                  >
                    ‚úï
                  </button>
                </div>
              </div>
              <div className="p-6">
                <AddJob
                  onSuccess={() => {
                    setAddModalOpen(false);
                    fetchApplications();
                  }}
                />
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Job;
